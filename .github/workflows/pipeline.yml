# AWS Lambda + DynamoDB + S3 Laboratory Pipeline
# Este pipeline automatiza la creación de todos los recursos necesarios para el laboratorio
# Respetando las restricciones de permisos reducidos (sin creación de roles IAM)

name: AWS Lambda DynamoDB S3 Laboratory

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # ========================================
      # PASO 1: Crear Tabla DynamoDB
      # ========================================
      - name: Create DynamoDB Table
        run: |
          echo "Creando tabla DynamoDB: ItemsTable"
          aws dynamodb create-table \
            --table-name ItemsTable \
            --attribute-definitions AttributeName=ItemId,AttributeType=S \
            --key-schema AttributeName=ItemId,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region us-east-1
          echo "Esperando a que la tabla esté activa..."
          aws dynamodb wait table-exists \
            --table-name ItemsTable \
            --region us-east-1
          echo "Tabla DynamoDB creada exitosamente"

      # ========================================
      # PASO 2: Crear Función Lambda ItemsFunction
      # ========================================
      - name: Create Items Lambda Function
        run: |
          echo "Creando función Lambda: ItemsFunction"
          # Crear archivo temporal con el código de la función
          cat > /tmp/items-function.js << 'EOF'
          const AWS = require('aws-sdk');
          const dynamo = new AWS.DynamoDB.DocumentClient();
          const tableName = 'ItemsTable';

          exports.handler = async (event) => {
              const method = event.requestContext.http.method;
              if (method === 'POST') {
                  const item = JSON.parse(atob(event.body));
                  await dynamo.put({ TableName: tableName, Item: item }).promise();
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: 'Item creado exitosamente' })
                  };
              } else if (method === 'GET') {
                  const itemId = event.queryStringParameters.id;
                  const result = await dynamo.get({ TableName: tableName, Key: { ItemId: itemId } }).promise();
                  if (result.Item) {
                      return {
                          statusCode: 200,
                          body: JSON.stringify(result.Item)
                      };
                  } else {
                      return {
                          statusCode: 404,
                          body: JSON.stringify({ message: 'Item no encontrado' })
                      };
                  }
              } else if (method === 'DELETE') {
                  const itemId = event.queryStringParameters.id;
                  await dynamo.delete({ TableName: tableName, Key: { ItemId: itemId } }).promise();
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: 'Item eliminado exitosamente' })
                  };
              }
          };
          EOF
          # Crear el paquete ZIP para la función Lambda
          cd /tmp
          zip items-function.zip items-function.js
          # Crear la función Lambda usando el rol existente LambdaAccessToDynamoDB
          aws lambda create-function \
            --function-name ItemsFunction \
            --runtime nodejs16.x \
            --role arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/LambdaAccessToDynamoDB \
            --handler items-function.handler \
            --zip-file fileb:///tmp/items-function.zip \
            --region us-east-1
          echo "Función Lambda ItemsFunction creada exitosamente"

      # ========================================
      # PASO 3: Crear API Gateway ItemsAPI
      # ========================================
      - name: Create Items API Gateway
        run: |
          echo "Creando API Gateway: ItemsAPI"
          # Crear la API HTTP
          API_ID=$(aws apigatewayv2 create-api \
            --name ItemsAPI \
            --protocol-type HTTP \
            --region us-east-1 \
            --query 'ApiId' \
            --output text)
          echo "API ID: $API_ID"
          echo "API_ID=$API_ID" >> /tmp/api_vars.env
          # Crear la integración con Lambda
          source /tmp/api_vars.env
          INTEGRATION_ID=$(aws apigatewayv2 create-integration \
            --api-id $API_ID \
            --integration-type AWS_PROXY \
            --integration-method POST \
            --integration-uri arn:aws:lambda:us-east-1:$(aws sts get-caller-identity --query Account --output text):function:ItemsFunction \
            --payload-format-version "2.0" \
            --region us-east-1 \
            --query 'IntegrationId' \
            --output text)
          echo "INTEGRATION_ID=$INTEGRATION_ID" >> /tmp/api_vars.env
          # Crear la ruta /items
          source /tmp/api_vars.env
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "ANY /items" \
            --target "integrations/$INTEGRATION_ID" \
            --region us-east-1
          # Crear el stage
          source /tmp/api_vars.env
          aws apigatewayv2 create-stage \
            --api-id $API_ID \
            --stage-name prod \
            --region us-east-1
          # Dar permisos a API Gateway para invocar Lambda
          source /tmp/api_vars.env
          aws lambda add-permission \
            --function-name ItemsFunction \
            --statement-id apigateway-invoke \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:us-east-1:$(aws sts get-caller-identity --query Account --output text):$API_ID/*/*" \
            --region us-east-1
          # Obtener la URL del endpoint
          source /tmp/api_vars.env
          ENDPOINT_URL="https://$API_ID.execute-api.us-east-1.amazonaws.com/prod"
          echo "ENDPOINT_URL=$ENDPOINT_URL" >> /tmp/api_vars.env
          echo "API Gateway ItemsAPI creada exitosamente"
          echo "Endpoint URL: $ENDPOINT_URL"

      # ========================================
      # PASO 4: Crear Bucket S3
      # ========================================
      - name: Create S3 Bucket
        run: |
          echo "Creando bucket S3: my-file-management-bucket-$(date +%s)"
          BUCKET_NAME="my-file-management-bucket-$(date +%s)"
          echo "BUCKET_NAME=$BUCKET_NAME" >> /tmp/api_vars.env
          # Crear el bucket S3
          aws s3 mb s3://$BUCKET_NAME \
            --region us-east-1
          echo "Bucket S3 creado exitosamente: $BUCKET_NAME"

      # ========================================
      # PASO 5: Crear Función Lambda S3FileManager
      # ========================================
      - name: Create S3 File Manager Lambda Function
        run: |
          echo "Creando función Lambda: S3FileManager"
          source /tmp/api_vars.env
          # Crear archivo temporal con el código de la función
          cat > /tmp/s3-function.js << EOF
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const bucketName = '$BUCKET_NAME';

          exports.handler = async (event) => {
              const method = event.httpMethod;
              if (method === 'POST') {
                  const fileName = event.queryStringParameters.fileName;
                  const fileContent = Buffer.from(event.body, 'base64');
                  await s3.putObject({ Bucket: bucketName, Key: fileName, Body: fileContent }).promise();
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: \`File \${fileName} uploaded successfully\` })
                  };
              } else if (method === 'GET') {
                  const response = await s3.listObjectsV2({ Bucket: bucketName }).promise();
                  const files = response.Contents.map(item => item.Key);
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ files })
                  };
              } else if (method === 'DELETE') {
                  const fileName = event.queryStringParameters.fileName;
                  await s3.deleteObject({ Bucket: bucketName, Key: fileName }).promise();
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: \`File \${fileName} deleted successfully\` })
                  };
              }
          };
          EOF
          # Crear el paquete ZIP para la función Lambda
          cd /tmp
          zip s3-function.zip s3-function.js
          # Crear la función Lambda usando el rol existente LambdaAccessToDynamoDB
          aws lambda create-function \
            --function-name S3FileManager \
            --runtime nodejs16.x \
            --role arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/LambdaAccessToDynamoDB \
            --handler s3-function.handler \
            --zip-file fileb:///tmp/s3-function.zip \
            --region us-east-1
          echo "Función Lambda S3FileManager creada exitosamente"

      # ========================================
      # PASO 6: Crear API Gateway FileManagementAPI
      # ========================================
      - name: Create Files API Gateway
        run: |
          echo "Creando API Gateway: FileManagementAPI"
          # Crear la API HTTP
          FILES_API_ID=$(aws apigatewayv2 create-api \
            --name FileManagementAPI \
            --protocol-type HTTP \
            --region us-east-1 \
            --query 'ApiId' \
            --output text)
          echo "FILES_API_ID=$FILES_API_ID" >> /tmp/api_vars.env
          # Crear la integración con Lambda
          source /tmp/api_vars.env
          FILES_INTEGRATION_ID=$(aws apigatewayv2 create-integration \
            --api-id $FILES_API_ID \
            --integration-type AWS_PROXY \
            --integration-method POST \
            --integration-uri arn:aws:lambda:us-east-1:$(aws sts get-caller-identity --query Account --output text):function:S3FileManager \
            --payload-format-version "2.0" \
            --region us-east-1 \
            --query 'IntegrationId' \
            --output text)
          echo "FILES_INTEGRATION_ID=$FILES_INTEGRATION_ID" >> /tmp/api_vars.env
          # Crear la ruta /files
          source /tmp/api_vars.env
          aws apigatewayv2 create-route \
            --api-id $FILES_API_ID \
            --route-key "ANY /files" \
            --target "integrations/$FILES_INTEGRATION_ID" \
            --region us-east-1
          # Crear el stage
          source /tmp/api_vars.env
          aws apigatewayv2 create-stage \
            --api-id $FILES_API_ID \
            --stage-name prod \
            --region us-east-1
          # Dar permisos a API Gateway para invocar Lambda
          source /tmp/api_vars.env
          aws lambda add-permission \
            --function-name S3FileManager \
            --statement-id apigateway-files-invoke \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:us-east-1:$(aws sts get-caller-identity --query Account --output text):$FILES_API_ID/*/*" \
            --region us-east-1
          # Obtener la URL del endpoint
          source /tmp/api_vars.env
          FILES_ENDPOINT_URL="https://$FILES_API_ID.execute-api.us-east-1.amazonaws.com/prod"
          echo "FILES_ENDPOINT_URL=$FILES_ENDPOINT_URL" >> /tmp/api_vars.env
          echo "API Gateway FileManagementAPI creada exitosamente"
          echo "Endpoint URL: $FILES_ENDPOINT_URL"

      # ========================================
      # PASO 7: Generar Scripts de Prueba
      # ========================================
      - name: Generate Test Scripts
        run: |
          echo "Generando scripts de prueba..."
          source /tmp/api_vars.env
          # Crear script de prueba para Items API
          cat > test-items-api.sh << EOF
          #!/bin/bash
          echo "=== Pruebas de Items API ==="
          echo "Endpoint: $ENDPOINT_URL"
          echo ""
          
          echo "1. Crear un item:"
          curl -X POST $ENDPOINT_URL/items \\
            -H "Content-Type: application/json" \\
            -d '{"ItemId": "1", "Name": "Item1", "Description": "Primer item de prueba"}'
          echo -e "\n"
          
          echo "2. Leer el item creado:"
          curl "$ENDPOINT_URL/items?id=1"
          echo -e "\n"
          
          echo "3. Eliminar el item:"
          curl -X DELETE "$ENDPOINT_URL/items?id=1"
          echo -e "\n"
          
          echo "4. Intentar leer el item eliminado:"
          curl "$ENDPOINT_URL/items?id=1"
          echo -e "\n"
          EOF
          # Crear script de prueba para Files API
          cat > test-files-api.sh << EOF
          #!/bin/bash
          echo "=== Pruebas de Files API ==="
          echo "Endpoint: $FILES_ENDPOINT_URL"
          echo ""
          
          # Crear archivo de prueba
          echo "Este es un archivo de prueba para el laboratorio AWS" > example.txt
          
          echo "1. Subir archivo:"
          curl -X POST "$FILES_ENDPOINT_URL/files?fileName=example.txt" \\
            --data-binary @example.txt \\
            -H "Content-Type: application/octet-stream"
          echo -e "\n"
          
          echo "2. Listar archivos:"
          curl "$FILES_ENDPOINT_URL/files"
          echo -e "\n"
          
          echo "3. Eliminar archivo:"
          curl -X DELETE "$FILES_ENDPOINT_URL/files?fileName=example.txt"
          echo -e "\n"
          
          echo "4. Listar archivos después de eliminar:"
          curl "$FILES_ENDPOINT_URL/files"
          echo -e "\n"
          
          # Limpiar archivo temporal
          rm -f example.txt
          EOF
          chmod +x test-items-api.sh test-files-api.sh
          echo "Scripts de prueba generados exitosamente"
